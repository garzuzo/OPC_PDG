CREATE DATABASE OPC_TEST;
CREATE USER U_OPC WITH PASSWORD 'opc_passwd';
ALTER ROLE U_OPC SET client_encoding TO 'utf8';
ALTER ROLE U_OPC SET default_transaction_isolation TO 'read committed';
ALTER ROLE U_OPC SET timezone TO 'UTC';
GRANT ALL PRIVILEGES ON DATABASE OPC_TEST TO U_OPC;





to install:
sudo pip install virtualenv

#virtualenv myprojectenv - ya está en el proyecto
source myprojectenv/bin/activate

#al activar el virtual env instalo las siguientes dependencias:
pip install django psycopg2
pip install djangorestframework
pip install djangorestframework_simplejwt




migraciones:

cd ~/myproject
python3 manage.py makemigrations
python3 manage.py migrate


#
python manage.py createsuperuser
user: opc_admin
password:opc_password



docs:

    migrate, which is responsible for applying and unapplying migrations.
    makemigrations, which is responsible for creating new migrations based on the changes you have made to your models.
    sqlmigrate, which displays the SQL statements for a migration.
    showmigrations, which lists a project’s migrations and their status.
    
    
    
    
python3 manage.py createsuperuser --username opc_admin --email garzuxo@gmail.com
    
New migration:

sudo su - postgres
psql
drop database OPC_TEST;
CREATE DATABASE OPC_TEST;
GRANT ALL PRIVILEGES ON DATABASE OPC_TEST TO U_OPC;
exit
python manage.py makemigrations
python manage.py migrate


Notes:
    Remove migrations without delete __init__.py
    
    
    
    
    
many to many
https://docs.djangoproject.com/en/2.2/topics/db/examples/many_to_many/
    
    
    

    
Limiting Access to Logged-in Users

Of course, the reason we’re going through all this trouble is so we can limit access to parts of our site.

The simple, raw way to limit access to pages is to check request.user.is_authenticated() and redirect to a login page:

from django.http import HttpResponseRedirect

def my_view(request):
    if not request.user.is_authenticated():
        return HttpResponseRedirect('/accounts/login/?next=%s' % request.path)
        
        
        
        
As a shortcut, you can use the convenient login_required decorator:

from django.contrib.auth.decorators import login_required

@login_required
